import Suppliers from "../models/Suppliers.js"

const suppliersController = {}

// ‚úÖ Crear un nuevo proveedor
suppliersController.postSuppliers = async (req, res) => {
  try {
    const { name, contactPerson, phoneNumber, email, address } = req.body

    // üîç Verifica si ya existe un proveedor con el mismo nombre
    const existingSupplier = await Suppliers.findOne({ name })
    if (existingSupplier) {
      return res.status(400).json({ message: "El proveedor ya existe" })
    }

    // üÜï Crea una nueva instancia del proveedor
    const newSupplier = new Suppliers({
      name,
      contactPerson,
      phoneNumber,
      email,
      address
    })

    // üíæ Guarda el nuevo proveedor en la base de datos
    await newSupplier.save()

    // ‚úÖ Devuelve respuesta exitosa
    res.status(201).json({ message: "Proveedor creado con √©xito", data: newSupplier })
  } catch (error) {
    // ‚ùå Error al crear proveedor
    res.status(400).json({ message: "Error al crear proveedor", error: error.message })
  }
}

// üì• Obtener todos los proveedores
suppliersController.getSuppliers = async (req, res) => {
  try {
    const suppliers = await Suppliers.find()
    res.status(200).json(suppliers)
  } catch (error) {
    res.status(500).json({ message: "Error al obtener proveedores", error: error.message })
  }
}

// üîç Obtener un proveedor por su ID
suppliersController.getSupplierById = async (req, res) => {
  try {
    const supplier = await Suppliers.findById(req.params.id)

    // ‚ö†Ô∏è Si no existe, enviar mensaje de no encontrado
    if (!supplier) {
      return res.status(404).json({ message: "Proveedor no encontrado" })
    }

    // ‚úÖ Si se encuentra, devolver proveedor
    res.status(200).json(supplier)
  } catch (error) {
    res.status(500).json({ message: "Error al obtener proveedor", error: error.message })
  }
}

// ‚úèÔ∏è Actualizar proveedor existente
suppliersController.putSuppliers = async (req, res) => {
  try {
    const updates = req.body // Nuevos datos a actualizar

    // üîÅ Buscar y actualizar proveedor por ID
    const updated = await Suppliers.findByIdAndUpdate(req.params.id, updates, { new: true })

    // ‚ö†Ô∏è Si no existe, devolver error
    if (!updated) {
      return res.status(404).json({ message: "Proveedor no encontrado" })
    }

    // ‚úÖ Proveedor actualizado correctamente
    res.status(200).json({ message: "Proveedor actualizado con √©xito", data: updated })
  } catch (error) {
    res.status(500).json({ message: "Error al actualizar proveedor", error: error.message })
  }
}

// üóëÔ∏è Eliminar proveedor por ID
suppliersController.deleteSuppliers = async (req, res) => {
  try {
    const supplier = await Suppliers.findById(req.params.id)

    // ‚ö†Ô∏è Verifica si el proveedor existe
    if (!supplier) {
      return res.status(404).json({ message: "Proveedor no encontrado" })
    }

    // üßπ Elimina el proveedor
    await Suppliers.findByIdAndDelete(req.params.id)

    // ‚úÖ Eliminaci√≥n exitosa
    res.status(204).json({ message: "Proveedor eliminado con √©xito" })
  } catch (error) {
    res.status(500).json({ message: "Error al eliminar proveedor", error: error.message })
  }
}

export default suppliersController
